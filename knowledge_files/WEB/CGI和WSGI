cgi是通用网关接口，是连接web服务器和应用程序的接口。

Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如
REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，这个程序也就是我们所要写的CGI程序了。
[[[[[[[[[[[[[[它会从环境变量中解析出这样请求的具体参数,负责生成动态内容，然后返回给服务器，]]]]]]]]]]]]]]]]
再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。

web服务器一般是使用C写的，比如nginx，apache。而应用程序则是由各种语言编写，比如php，java，python等。这两种语言要进行交互就需要有个协议进行规定，而cgi就是这么个网关协议。

缺点是每一次向CGI发送请求，都会生成一个CGI进程，，这种就是所谓的fork-and-exec模式，也通常是导致并发瓶颈的症结。
各种语言都可以写cgi程序

apache，nginx这些服务器，是静态服务器，也就是说，只能把本地的现成的html，css之类的东西传给浏览器。
而如果我们想要做动态网站呢？（就是说我们希望返回的页面是通过用户请求的数据动态生成的，之前没有的）
假设我们打算用python写，那么这个时候就有人提出了一个叫做WSGI的协议，告诉我们，
大家要写动态网站的话，肯定会写一些输入用户请求，返回页面的函数，那么这些函数都按照WSGI规定的样子来写，
这样的话，写函数的就专心写函数，不用管获取用户输入，输出生成页面的事，而写获取和输出的，不用管函数，这样大家就可以互相用代码了。
比如一个动态网站的例子，apache+mod_wsgi+django，django是一个web框架，
但也可以看成就是一个复杂一点的输入用户请求，返回页面的函数，并且满足WSGI里面的规定，
而mod_wsgi就是apache的一个模块，这个模块让apache这个静态服务器可以帮满足WSGI规范的函数实现获取用户请求和输出页面的功能。

所以，总结的话，WSGI就是一个规范，
所有的框架都是在符合WSGI规范的基础上建立的，或者说框架都实现了WSGI

wsgi是将web server参数python化，封装为request对象传递给apllication命名的func对象并接受其传出的response参数，
由于其处理了参数封装和结果解析，才有python世界web框架的泛滥，在python下，写web框架就像喝水一样简单

WSGI就是Python的CGI包装，相对于Fastcgi是PHP的CGI包装
